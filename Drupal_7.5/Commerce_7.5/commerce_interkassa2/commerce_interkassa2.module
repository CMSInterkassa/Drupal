<?php
/**
 * @name Интеркасса 2.0
 * @description Модуль разработан в компании GateOn предназначен для CMS Drupal 7.5.x + Commerce 1.1x
 * @author www.gateon.net
 * @email www@smartbyte.pro
 * @version 1.0
 */


/*Return main information about module*/
function commerce_interkassa2_commerce_payment_method_info()
{
    return array(
        'commerce_interkassa2' => array(
            'title' => t('Интеркасса 2.0'),
            'display_title' => t('Интеркасса 2.0'),
            'active' => TRUE,
            'terminal' => TRUE,
            'offsite' => TRUE,
            'offsite_autoredirect' => FALSE,
        ),
    );
}

/*Return module default settings*/
function commerce_interkassa2_default_settings()
{
    return array(
        'ik_co_id' => '',
        's_key' => '',
        't_key' => ''
    );
}

/*Return payment settings fields in admin panel */
function commerce_interkassa2_settings_form($settings = NULL)
{
    $settings = (array)$settings + commerce_interkassa2_default_settings();
    $form = array();
    $form['ik_co_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Идентификатор кассы'),
        '#description' => t('Находится возле название вашей кассы'),
        '#default_value' => $settings['ik_co_id'],
        '#required' => TRUE,
    );
    $form['s_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Секретный ключ'),
        '#description' => t('Секретный ключ вы можете взять в настройках вашей кассы, во вкладке безопасность'),
        '#default_value' => $settings['s_key'],
        '#maxlength' => 64,
        '#required' => TRUE,
    );
    $form['t_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Tестовый ключ'),
        '#description' => t('Tестовый ключ вы можете взять в настройках вашей кассы, во вкладке безопасность'),
        '#default_value' => $settings['t_key'],
        '#maxlength' => 64,
        '#required' => TRUE,
    );
    return $form;
}


/*Hook function that add new url for simplier interaction*/
function commerce_interkassa2_menu()
{
    $url['commerce_interkassa2/information'] = array(
        'title' => 'Payment information',
        'page callback' => 'commerce_interkassa2_user_information',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $url['commerce_interkassa2/interaction'] = array(
        'title' => 'Interkassa interaction',
        'page callback' => 'commerce_interkassa2_interaction',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    return $url;
}

/*Return payment method in selection on checkout page*/
function commerce_interkassa2_submit_form($payment_method, $pane_values, $checkout_pane, $order)
{

    $form = array();
    $info = theme('image', array(
        'path' => drupal_get_path('module', 'commerce_interkassa2') . '/images/interkassa2.png',
        'alt' => t('Interkassa 2'),
        'title' => t('Interkassa 2'),
        'attributes' => array('class' => 'logo-interkassa'),
    ));
    $form['print_receipt'] = array('#markup' => $info);
    return $form;
}


/*Return form that is sending to Interkassa payment systems selection*/
function commerce_interkassa2_redirect_form($form, &$form_state, $order, $payment_method)
{
    commerce_order_status_update($order, 'pending');
    commerce_order_save($order);

    global $user, $base_url;
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $ik_co_id = $payment_method['settings']['ik_co_id'];
    $ik_am = $wrapper->commerce_order_total->amount->value();
    $ik_cur = $wrapper->commerce_order_total->currency_code->value();
    $ik_pm_no = $order->order_id;
    $ik_desc = '#' . $order->order_id;
    $ik_suc_u = url('commerce_interkassa2/information', array('absolute' => TRUE));
    $ik_fal_u = url('commerce_interkassa2/information', array('absolute' => TRUE));
    $ik_pnd_u = url('commerce_interkassa2/information', array('absolute' => TRUE));
    $ik_ia_u = url('commerce_interkassa2/interaction', array('absolute' => TRUE));
    $s_key = $payment_method['settings']['s_key'];

    $form['#name'] = 'payment';
    $form['#action'] = 'https://sci.interkassa.com/';

    $data = array(
        'ik_co_id' => $ik_co_id,
        'ik_pm_no' => $ik_pm_no,
        'ik_desc' => $ik_desc,
        'ik_cur' => $ik_cur,
        'ik_am' => $ik_am,
        'ik_ia_u' => $ik_ia_u,
        'ik_suc_u' => $ik_suc_u,
        'ik_fal_u' => $ik_fal_u,
        'ik_pnd_u' => $ik_pnd_u
    );
    ksort($data, SORT_STRING);
    array_push($data, $s_key);
    $arg = implode(':', $data);
    $signature = base64_encode(md5($arg, true));
    $data['ik_sign'] = $signature;

    foreach ($data as $name => $value) {
        if (!empty($value)) {
            $form[$name] = array('#type' => 'hidden', '#value' => $value);
        }
    }
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Оплатить с помощью Интеркассы'),
    );
    return $form;
}


/*Receive Interkassa request, make validation and update order status id validation return success*/
function commerce_interkassa2_interaction()
{
    if (count($_POST) && checkIP() && isset($_POST['ik_sign'])) {
        $order = commerce_order_load($_POST['ik_pm_no']);
        $settings = commerce_payment_method_instance_load($order->data['payment_method'])['settings'];
        $wrapper = entity_metadata_wrapper('commerce_order', $order);
        $ik_cur = $wrapper->commerce_order_total->currency_code->value();

        if ($_POST['ik_inv_st'] == 'success' && $settings['ik_co_id'] == $_POST['ik_co_id'] && $ik_cur == $_POST['ik_cur']) {

            if (isset($_POST['ik_pw_via']) && $_POST['ik_pw_via'] == 'test_interkassa_test_xts') {
                $secret_key = $settings['t_key'];
            } else {
                $secret_key = $settings['s_key'];
            }

            $request = $_POST;
            $request_sign = $request['ik_sign'];
            unset($request['ik_sign']);

            //удаляем все поле которые не принимают участия в формировании цифровой подписи
            foreach ($request as $key => $value) {
                if (!preg_match('/ik_/', $key)) continue;
                $request[$key] = $value;
            }
            //формируем цифровую подпись
            ksort($request, SORT_STRING);
            array_push($request, $secret_key);
            $str = implode(':', $request);
            $sign = base64_encode(md5($str, true));

            //Если подписи совпадают то осуществляется смена статуса заказа в админке
            if ($request_sign == $sign) {
                commerce_order_status_update($order, 'completed');
                commerce_order_save($order);
            }
        }
    }
    return true;
}

/*Return page where user had been redirected from Interkassa after payment,depending on payment result*/
function commerce_interkassa2_user_information()
{
    $order = commerce_order_load(75);
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $transaction = commerce_payment_transaction_new('interkassa2', $_POST['ik_pm_no']);
    $transaction->amount == $wrapper->commerce_order_total->amount->value();
    $transaction->currency_code = commerce_default_currency();

    switch ($_POST['ik_inv_st']) {
        case 'success':
            $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
            commerce_payment_redirect_pane_next_page($order);
            $transaction->message = t('Заказ успешно оплачен с помощью Интеркассы');
            drupal_set_message(t("Заказ успешно оплачен с помощью Интеркассы"), 'status');
            break;
        case 'canceled':
            $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
            commerce_payment_redirect_pane_previous_page($order);
            $transaction->message = t('Заказ не оплачен');
            drupal_set_message(t("Заказ не оплачен"), 'error');
            commerce_order_status_update($order, 'Canceled');
            commerce_order_save($order);
            break;
        case 'waitAccept':
            $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
            commerce_payment_redirect_pane_next_page($order);
            $transaction->message = t('Заказ ожидает оплаты');
            drupal_set_message(t("Заказ ожидает оплаты"), 'warning');
            break;
    }
    drupal_goto(commerce_checkout_order_uri($order));
    commerce_payment_transaction_save($transaction);
}

/*Return true if request IP is Interkassa Getaway IP*/
function checkIP()
{
    $ip_stack = array(
        'ip_begin' => '151.80.190.97',
        'ip_end' => '151.80.190.104'
    );

    if (!ip2long($_SERVER['REMOTE_ADDR']) >= ip2long($ip_stack['ip_begin']) && !ip2long($_SERVER['REMOTE_ADDR']) <= ip2long($ip_stack['ip_end'])) {
        wrlog('REQUEST IP' . $_SERVER['REMOTE_ADDR'] . 'doesnt match');
        die('Ты мошенник! Пшел вон отсюда!');
    }
    return true;
}
